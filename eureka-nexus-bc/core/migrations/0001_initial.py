# Generated by Django 5.1.4 on 2024-12-17 10:13

import core.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to=core.models.get_unique_profile_path)),
                ('bio', models.TextField(default='Hello, I am a member of this platform.')),
                ('birthday', models.DateField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
                ('description', models.TextField(max_length=1000)),
                ('image', models.ImageField(blank=True, null=True, upload_to=core.models.get_unique_post_path)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('size', models.CharField(blank=True, max_length=50, null=True)),
                ('size_exactness', models.CharField(blank=True, choices=[('exact', 'Exact'), ('approximate', 'Approximate')], max_length=20, null=True)),
                ('size_type', models.CharField(blank=True, choices=[('exact', 'Exact'), ('approximate', 'Approximate')], max_length=20, null=True)),
                ('approximate_size', models.CharField(blank=True, max_length=100, null=True)),
                ('width', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('height', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('depth', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('size_unit', models.CharField(blank=True, choices=[('mm', 'Millimeter'), ('cm', 'Centimeter'), ('m', 'Meter'), ('km', 'Kilometer'), ('in', 'Inch'), ('ft', 'Foot'), ('yd', 'Yard'), ('mi', 'Mile')], max_length=5, null=True)),
                ('weight_type', models.CharField(blank=True, choices=[('exact', 'Exact'), ('approximate', 'Approximate')], max_length=20, null=True)),
                ('approximate_weight', models.CharField(blank=True, choices=[('lightweight', 'Lightweight'), ('medium', 'Medium Weight'), ('heavy', 'Heavy'), ('other', 'Other')], max_length=20, null=True)),
                ('custom_approximate_weight', models.CharField(blank=True, max_length=100, null=True)),
                ('exact_weight', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('weight_unit', models.CharField(blank=True, choices=[('mg', 'Milligram'), ('g', 'Gram'), ('kg', 'Kilogram'), ('t', 'Ton'), ('oz', 'Ounce'), ('lb', 'Pound'), ('st', 'Stone')], max_length=5, null=True)),
                ('colour', models.CharField(blank=True, choices=[('red', 'Red'), ('blue', 'Blue'), ('green', 'Green'), ('yellow', 'Yellow'), ('black', 'Black'), ('white', 'White'), ('brown', 'Brown'), ('grey', 'Grey'), ('other', 'Other')], max_length=20, null=True)),
                ('custom_colour', models.CharField(blank=True, max_length=50, null=True)),
                ('shape', models.CharField(blank=True, choices=[('round', 'Round'), ('square', 'Square'), ('rectangular', 'Rectangular'), ('triangular', 'Triangular'), ('oval', 'Oval'), ('irregular', 'Irregular'), ('other', 'Other')], max_length=20, null=True)),
                ('custom_shape', models.CharField(blank=True, max_length=300, null=True)),
                ('weight', models.CharField(blank=True, max_length=50, null=True)),
                ('weight_exactness', models.CharField(blank=True, choices=[('exact', 'Exact'), ('approximate', 'Approximate')], max_length=20, null=True)),
                ('texture', models.CharField(blank=True, choices=[('smooth', 'Smooth'), ('rough', 'Rough'), ('grainy', 'Grainy'), ('polished', 'Polished'), ('matte', 'Matte'), ('other', 'Other')], max_length=20, null=True)),
                ('custom_texture', models.CharField(blank=True, max_length=300, null=True)),
                ('origin', models.CharField(blank=True, max_length=300, null=True)),
                ('value', models.CharField(blank=True, max_length=50, null=True)),
                ('condition', models.CharField(blank=True, choices=[('new', 'New'), ('like_new', 'Like New'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('other', 'Other')], max_length=20, null=True)),
                ('custom_condition', models.CharField(blank=True, max_length=100, null=True)),
                ('smell', models.CharField(blank=True, choices=[('odorless', 'Odorless'), ('chemical', 'Chemical'), ('earthy', 'Earthy'), ('metallic', 'Metallic'), ('fragrant', 'Fragrant'), ('other', 'Other')], max_length=20, null=True)),
                ('custom_smell', models.CharField(blank=True, max_length=300, null=True)),
                ('taste', models.CharField(blank=True, choices=[('sweet', 'Sweet'), ('salty', 'Salty'), ('metallic', 'Metallic'), ('bitter', 'Bitter'), ('sour', 'Sour'), ('other', 'Other')], max_length=20, null=True)),
                ('custom_taste', models.CharField(blank=True, max_length=300, null=True)),
                ('origin_of_acquisition', models.CharField(blank=True, max_length=300, null=True)),
                ('pattern', models.CharField(blank=True, choices=[('plain', 'Plain'), ('patterned', 'Patterned'), ('striped', 'Striped'), ('checkered', 'Checkered'), ('marbled', 'Marbled'), ('other', 'Other')], max_length=20, null=True)),
                ('custom_pattern', models.CharField(blank=True, max_length=300, null=True)),
                ('functionality', models.CharField(blank=True, choices=[('rigid', 'Rigid'), ('moving', 'Moving'), ('adhesive', 'Adhesive'), ('other', 'Other')], max_length=20, null=True)),
                ('custom_functionality', models.CharField(blank=True, max_length=300, null=True)),
                ('other_multimedia', models.ImageField(blank=True, null=True, upload_to='post_other_images/')),
                ('status', models.CharField(choices=[('unknown', 'Unknown'), ('solved', 'Solved')], default='unknown', max_length=20)),
                ('material', models.CharField(blank=True, choices=[('metal', 'Metal'), ('wood', 'Wood'), ('plastic', 'Plastic'), ('glass', 'Glass'), ('fabric', 'Fabric'), ('ceramic', 'Ceramic'), ('other', 'Other')], max_length=20, null=True)),
                ('custom_material', models.CharField(blank=True, max_length=100, null=True)),
                ('image_description', models.TextField(blank=True, max_length=500, null=True)),
                ('icon_description', models.TextField(blank=True, max_length=500, null=True)),
                ('markings', models.TextField(blank=True, max_length=500, null=True)),
                ('print_description', models.TextField(blank=True, max_length=500, null=True)),
                ('brand', models.CharField(blank=True, max_length=200, null=True)),
                ('time_period', models.CharField(blank=True, choices=[('ancient', 'Ancient'), ('medieval', 'Medieval'), ('modern', 'Modern'), ('contemporary', 'Contemporary'), ('other', 'Other')], max_length=20, null=True)),
                ('custom_time_period', models.CharField(blank=True, max_length=100, null=True)),
                ('object_domain', models.CharField(blank=True, choices=[('art_design', 'Art and Design'), ('technology', 'Technology'), ('household', 'Household'), ('fashion_accessories', 'Fashion and Accessories'), ('tools_equipment', 'Tools and Equipment'), ('toys_games', 'Toys and Games'), ('historical_cultural', 'Historical and Cultural'), ('other', 'Other')], max_length=30, null=True)),
                ('custom_object_domain', models.CharField(blank=True, max_length=100, null=True)),
                ('hardness', models.CharField(blank=True, choices=[('soft', 'Soft'), ('medium', 'Medium'), ('hard', 'Hard'), ('other', 'Other')], max_length=20, null=True)),
                ('custom_hardness', models.CharField(blank=True, max_length=100, null=True)),
                ('elasticity', models.CharField(blank=True, choices=[('elastic', 'Elastic'), ('non_elastic', 'Non-elastic'), ('semi_elastic', 'Semi-elastic'), ('other', 'Other')], max_length=20, null=True)),
                ('custom_elasticity', models.CharField(blank=True, max_length=100, null=True)),
                ('transparency', models.CharField(blank=True, choices=[('transparent', 'Transparent'), ('translucent', 'Translucent'), ('opaque', 'Opaque'), ('other', 'Other')], max_length=20, null=True)),
                ('custom_transparency', models.CharField(blank=True, max_length=100, null=True)),
                ('location', models.CharField(blank=True, max_length=300, null=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('tag', models.CharField(blank=True, choices=[('question', 'Question'), ('hint', 'Hint'), ('answer', 'Answer')], max_length=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='core.comment')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.post')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('value', models.TextField()),
                ('instance_id', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attributes', to='core.post')),
            ],
            options={
                'ordering': ['name', 'instance_id'],
            },
        ),
        migrations.CreateModel(
            name='PostMultimedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=core.models.get_unique_multimedia_path)),
                ('file_type', models.CharField(choices=[('image', 'Image'), ('video', 'Video'), ('audio', 'Audio'), ('document', 'Document')], max_length=20)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('description', models.TextField(blank=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('order', models.IntegerField(default=0)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='multimedia_files', to='core.post')),
            ],
            options={
                'ordering': ['order', 'uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='WikidataTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wikidata_id', models.CharField(max_length=20)),
                ('label', models.CharField(max_length=100)),
                ('link', models.CharField(blank=True, max_length=300, null=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wikidata_tags', to='core.post')),
            ],
        ),
        migrations.CreateModel(
            name='PostFollower',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('followed_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to='core.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followed_posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'post')},
            },
        ),
        migrations.CreateModel(
            name='UserFollower',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('followed_at', models.DateTimeField(auto_now_add=True)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'following')},
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote_type', models.CharField(choices=[('up', 'Upvote'), ('down', 'Downvote')], max_length=4)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='core.comment')),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='core.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('comment__isnull', True), ('post__isnull', False)), models.Q(('comment__isnull', False), ('post__isnull', True)), _connector='OR'), name='vote_only_on_post_or_comment')],
                'unique_together': {('user', 'comment'), ('user', 'post')},
            },
        ),
    ]
